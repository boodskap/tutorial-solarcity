{"type":7,"data":{"domainKey":"EXGQKXOHIN","id":"StatisticsUpdaterJob","name":"","jobType":"CLUSTER_SINGLETON","jobState":"ENABLED","jobLanguage":"GROOVY","jobCode":"/**\n * This Job waits on the queue (POWER_STATS_Q) \n * and updates various status records\n * \n * \n * **************************************\n * Run this job as **Cluster Singleton**\n * **************************************\n * \n */\n \n DEBUG = false;\n \n def ID_STATUS          = 1001;\n def ID_COMMU_STATUS    = 1002;\n def ID_HOUSE_STATUS    = 1003;\n def ID_DEVICE_STATUS   = 1004;\n def ID_COUNTRY_STATUS  = 1005;\n def ID_STATE_STATUS    = 1006;\n def ID_CITY_STATUS     = 1007;\n \n def statusQ = grid.mapQueue('POWER_STATS_Q');\n\n log.info('Started and wating for power status...');\n \n while(!THIS.isStopped()){\n     \n     def vals = statusQ.take();\n     \n     try{\n\n         def deviceStatusId = String.format(\"%s_%s\", vals.household_id, vals.device_id);\n         def stateStatusId = String.format(\"%s_%s\", vals.country, vals.state);\n         def cityStatusId = String.format(\"%s_%s_%s\", vals.country, vals.state, vals.city);\n         \n         def dsr = [totalgenerated: vals.totalgenerated, totalconsumed: vals.totalconsumed, totaldistributed: vals.totaldistributed, device: vals.device];\n         \n         /**\n          * Take the previous device status and minus with current to get the current values\n          */ \n         def dsrOld = record.get(ID_DEVICE_STATUS, deviceStatusId);\n         if(null == dsrOld){\n             dsrOld = [totalgenerated:0.0D, totalconsumed:0.0D, totaldistributed:0.0D];\n         }\n         \n         def dsrDiff = [:];\n         dsrDiff.totalgenerated = (vals.totalgenerated - dsrOld.totalgenerated);\n         dsrDiff.totalconsumed = (vals.totalconsumed - dsrOld.totalconsumed);\n\n         /**\n          * Get the old records and add the difference\n          */\n         def sr = record.get(ID_STATUS, \"status\");\n         def cosr = record.get(ID_COMMU_STATUS, vals.community_id);\n         def hsr = record.get(ID_HOUSE_STATUS, vals.household_id);\n         def csr = record.get(ID_COUNTRY_STATUS, vals.country);\n         def ssr = record.get(ID_STATE_STATUS, stateStatusId);\n         def cisr = record.get(ID_CITY_STATUS, cityStatusId);\n        \n         if(null == sr){\n             sr = [totalgenerated:0.0D, totalconsumed:0.0D, totaldistributed:0.0D];\n         }\n          \n         if(null == cosr){\n             cosr = [totalgenerated:0.0D, totalconsumed:0.0D, totaldistributed:0.0D, community: vals.community, city: vals.city, state: vals.state, country: vals.country];\n         }\n          \n         if(null == hsr){\n             hsr = [totalgenerated:0.0D, totalconsumed:0.0D, totaldistributed:0.0D, household: vals.household, community: vals.community, city: vals.city, state: vals.state, country: vals.country];\n         }\n          \n         if(null == csr){\n             csr = [totalgenerated:0.0D, totalconsumed:0.0D, totaldistributed:0.0D, country: vals.country];\n         }\n          \n         if(null == ssr){\n             ssr = [totalgenerated:0.0D, totalconsumed:0.0D, totaldistributed:0.0D,  state: vals.state, country: vals.country];\n         }\n          \n         if(null == cisr){\n             cisr = [totalgenerated:0.0D, totalconsumed:0.0D, totaldistributed:0.0D, city: vals.city, state: vals.state, country: vals.country];\n         }\n         \n         setValues(sr, dsrDiff, vals, 'Global Status');\n         setValues(cosr, dsrDiff, vals, 'Community Status');\n         setValues(hsr, dsrDiff, vals, 'Household Status');\n         setValues(csr, dsrDiff, vals, 'Country Status');\n         setValues(ssr, dsrDiff, vals, 'State Status');\n         setValues(cisr, dsrDiff, vals, 'City Status');\n          \n         /**\n          * Upsert all the records\n          */ \n         record.insert(ID_STATUS, \"status\", sr);\n         record.insert(ID_DEVICE_STATUS, deviceStatusId, dsr);\n         record.insert(ID_COMMU_STATUS, vals.community_id, cosr);\n         record.insert(ID_HOUSE_STATUS, vals.household_id, hsr);\n         record.insert(ID_COUNTRY_STATUS, vals.country, csr);\n         record.insert(ID_STATE_STATUS, stateStatusId, ssr);\n         record.insert(ID_CITY_STATUS, cityStatusId, cisr);\n     \n        log.trace('_REFRESH_%s', vals.community_id); //Don't remove this, needed for UI push messaging\n         \n     }catch(Exception ex){\n         log.error(ex);\n         failure.insert(ex);\n     }\n     \n }\n \n def setValues(rec, diff, vals, label){\n     if(DEBUG) log.info(\"%s before %s\", label, [totalgenerated:rec.totalgenerated, totalconsumed:rec.totalconsumed, totaldistributed:rec.totaldistributed]);\n\n     rec.stamp = util.millis();\n     rec.zipcode= vals.zipcode;\n     rec.totalgenerated += diff.totalgenerated;\n     rec.totalconsumed += diff.totalconsumed;\n     \n     def ddist = (diff.totalgenerated - diff.totalconsumed);;\n     ddist = ddist - ((ddist/100.0D) * Double.valueOf(vals.gridloss));\n     rec.totaldistributed += ddist;\n     \n     if(DEBUG) log.info(\"%s after %s\", label, [totalgenerated:rec.totalgenerated, totalconsumed:rec.totalconsumed, totaldistributed:rec.totaldistributed]);\n }\n\n","instances":1,"startOnBoot":true,"resartOnChange":true}}